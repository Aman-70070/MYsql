CREATE DATABASE CASE_STUDY_1
USE CASE_STUDY_1

SELECT * FROM FACT
SELECT * FROM LOCATION
SELECT * FROM PRODUCT

1. Display the number of states present in the LocationTable. 

SELECT COUNT(DISTINCT STATE) AS COUNT_STATE FROM LOCATION

2. How many products are of regular type?

SELECT COUNT(PRODUCT) AS COUNT_PRODUCT FROM PRODUCT WHERE TYPE='REGULAR'

3. How much spending has been done on marketing of product ID 1?

SELECT SUM(MARKETING)AS MARKETING FROM FACT WHERE PRODUCTID=1

4. What is the minimum sales of a product?

SELECT MIN(SALES) AS MIN_SALES FROM FACT

5. Display the max Cost of Good Sold (COGS).

SELECT MAX(COGS) AS MAX_COGS FROM FACT

6. Display the details of the product where product type is coffee.

SELECT * FROM PRODUCT WHERE PRODUCT_TYPE='COFFEE'

7. Display the details where total expenses are greater than 40.

SELECT * FROM FACT WHERE TOTAL_EXPENSES>40

8. What is the average sales in area code 719?

SELECT AVG(SALES) AS AVG_SALES FROM FACT WHERE AREA_CODE=719

9. Find out the total profit generated by Colorado state

SELECT SUM(PROFIT) AS TOTAL_PROFIT FROM FACT INNER JOIN LOCATION ON FACT.
AREA_CODE=LOCATION. 
AREA_CODE WHERE STATE='COLORADO'

10. Display the average inventory for each product ID.

SELECT AVG(PRODUCTID) AS AVG_PRODUCTID FROM FACT GROUP BY PRODUCTID

11. Display state in a sequential order in a Location Table.

SELECT * FROM LOCATION ORDER BY STATE DESC

12. Display the average budget of the Product where the average budget margin should be greater than 100.

SELECT AVG(BUDGET_MARGIN) AS AVG FROM FACT GROUP BY PRODUCTID HAVING AVG(BUDGET_MARGIN)>100

13. What is the total sales done on date 2010-01-01?

SELECT SUM(SALES) AS TOTAL_SALES FROM FACT WHERE DATE='2010-01-01'


14. Display the average total expense of each product ID on an individual date. 

SELECT PRODUCTID,DATE,AVG(TOTAL_EXPENSES) AS AVG FROM FACT GROUP BY PRODUCTID,DATE ORDER BY DATE

15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code

select f.date,f.productid,p.product_type,p.product,f.sales, l.state,l.area_code 
from fact f inner join product p on f.productid = p.productid 
inner join location l on f.area_code = l.area_code

16. Display the rank without any gap to show the sales wise rank.

SELECT SALES, DENSE_RANK() OVER (ORDER BY SALES ASC) AS RANK FROM FACT

17. Find the state wise profit and sales. 

SELECT LOCATION.STATE, SUM(PROFIT) AS PROFIT, SUM(SALES) AS SALES
FROM FACT INNER JOIN LOCATION ON FACT.AREA_CODE=LOCATION.AREA_CODE GROUP BY LOCATION.STATE

18. Find the state wise profit and sales along with the productname.

select l.state,sum(f.profit) as profit,sum(f.sales) as sales,p.product
from fact f inner join location l on f.area_code = l.area_code 
inner join product p on p.productid = f.ProductId group by l.state, p.product

19. If there is an increase in sales of 5%, calculate the increasedsales. 

SELECT PRODUCTID, SALES, (SALES+SALES*5/100) AS INCREASED_SALE FROM FACT

20. Find the maximum profit along with the product ID and producttype.

SELECT FACT.PRODUCTID, MAX(PROFIT) MAX_PROFIT, PRODUCT.PRODUCT_TYPE
FROM FACT INNER JOIN PRODUCT ON FACT.PRODUCTID=PRODUCT.PRODUCTID 
GROUP BY FACT.PRODUCTID, PRODUCT.PRODUCT_TYPE

21. Create a stored procedure to fetch the result according to the product typefrom Product Table. 

CREATE PROCEDURE PTYPE @PROD_TYP VARCHAR(20) AS 
SELECT * FROM PRODUCT WHERE PRODUCT_TYPE=@PROD_TYP
EXEC PTYPE @PROD_TYP='COFFEE'

22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss.

SELECT TOTAL_EXPENSES, IIF(TOTAL_EXPENSES>60, 'PROFIT', 'LOSS') AS PROFITORLOSS FROM FACT

23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order. 

SELECT DATE, PRODUCTID, SUM(SALES) AS TOTAL_SALES FROM FACT
GROUP BY DATE, PRODUCTID WITH ROLLUP

24. Apply union and intersection operator on the tables which consist of
attribute area code. 

SELECT AREA_CODE FROM FACT UNION SELECT AREA_CODE FROM LOCATION 
SELECT AREA_CODE FROM FACT INTERSECT SELECT AREA_CODE FROM LOCATION

25. Create a user-defined function for the product table to fetch a particular
product type based upon the user’s preference.

CREATE FUNCTION PRO_TYPE(@PROD_TYP VARCHAR(20))RETURNS TABLE
AS RETURN SELECT * FROM Product WHERE Product_Type = @PROD_TYP)
SELECT * FROM DBO.PRO_TYPE('COFFEE')

26. Change the product type from coffee to tea where product IDis 1 and undo it. 

BEGIN TRAN UPDATE PRODUCT SET PRODUCT_TYPE='TEA' WHERE PRODUCTID=1
ROLLBACK
SELECT * FROM PRODUCT

27. Display the date, product ID and sales where total expenses arebetween 100 to 200. 

SELECT DATE, PRODUCTID, SALES FROM FACT 
WHERE TOTAL_EXPENSES BETWEEN 100 AND 200

28. Delete the records in the Product Table for regular type.

BEGIN TRAN DELETE FROM PRODUCT WHERE TYPE='REGULAR'

29. Display the ASCII value of the fifth character from the columnProduct.

SELECT ASCII(SUBSTRING(PRODUCT,5,1)) AS ASCII_VALUE FROM PRODUCT
